local log = require "tracer" 

log:info("extension","Hello from extension in SGT folder!")


-- In this extension we will just override the default overlay class used to build the turrets.
-- But first we most load the package containing lua module, except if a debugging path is provided:

local mpath = os.getenv("MXENGINE_MODULE_PATH")
if mpath then
	-- just add the path:
	mpath = mpath:gsub("\\","/") ..";"
	mpath = mpath:gsub(";","/?.lua;")
	log:debug("extension","Adding module paths: '"..mpath.."'");
	package.path = mpath .. ";" .. package.path
else
	log:debug("extension","Loading mxcef package from " .. root_path .. "/packages/");
	requirePackage("mxcef",root_path.."/packages/")
end

-- We also have to update the binary path to look for the additional module:
package.cpath = root_path .. "/modules/?.sgp;" .. package.cpath

-- Now we can replace the Overlay class in the turret common part:
log:debug("extension","Assigning CEFOverlay as target implementation.");
local cfg = require "models.turret.parts.Common"
cfg:set("Overlay.class_name","CEFOverlay")

-- also override the method from OutputChannel to build the overlay:
local OutputChannel = require "mx.OutputChannel"

OutputChannel.buildOverlay = function(self)
	self:debug("Calling overrided OutputChannel buildOverlay method.")

	-- Check if we have an overlay class specified:
	local className = self:getConfig():get("Overlay.class_name")
	if className and className~="" and self:getID()==1 and self:isDigital() then
		-- check if we have build options:
		local options = self:getConfig():get("Overlay.build_options",{})
		
		-- add the overlay class as an effect for this processor:
		self._overlayFx = self:addEffect(className,options)

		-- once we have an overlay class, we can already decide here if the outlines should be enabled or not:
		-- for now we just assume that only digital outputs use the advanced outline effect, or analog outputs
		-- but only when on RCS15
		self._overlayFx:setOutlineState(self:isDigital() or self:isRCS(15))

		-- disable by default:
		self._overlayFx:setEnabled(false)

		-- prepare the udpate callback for later usage:
		self._overlayUpdateCB = function()
			self._overlayFx:update()
		end
	end
end
